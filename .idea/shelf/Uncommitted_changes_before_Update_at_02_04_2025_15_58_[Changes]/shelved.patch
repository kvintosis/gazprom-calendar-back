Index: controllers/sqlcontroller.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sqlalchemy\r\nimport bcrypt\r\nfrom model.User import User\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy.ext.automap import automap_base\r\nfrom sqlalchemy.orm import Session\r\n\r\n\r\nclass SQLController:\r\n    _base = None\r\n    _engine = None\r\n\r\n    def __init__(self, address):\r\n        try:\r\n            self._engine = create_engine(address, echo=True)\r\n            self._base = automap_base()\r\n            self._base.prepare(autoload_with=self._engine, reflect=True)\r\n        except sqlalchemy.exc.OperationalError:\r\n            pass\r\n\r\n    def create_user(self, user: User):\r\n        with Session(self._engine) as session:\r\n            salt = bcrypt.gensalt()\r\n            user.password = str(bcrypt.hashpw(user.password.encode(\"utf-8\"), salt))\r\n            employees = self._base.classes.employees\r\n            session.add(employees(first_name=user.first_name,\r\n                        last_name=user.last_name,\r\n                        birth_date=user.birth_date,\r\n                        position=user.position,\r\n                        department=user.department,\r\n                        skills=user.skills,\r\n                        interests=user.interests,\r\n                        email=user.email,\r\n                        password_hash=user.password,\r\n                        role=user.role))\r\n            session.commit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/sqlcontroller.py b/controllers/sqlcontroller.py
--- a/controllers/sqlcontroller.py	(revision 2d057a665710289698d0a4fbe16c04bfdfe2c517)
+++ b/controllers/sqlcontroller.py	(date 1743584011819)
@@ -1,6 +1,7 @@
 import sqlalchemy
 import bcrypt
 from model.User import User
+from model.Event import Event
 from sqlalchemy import create_engine
 from sqlalchemy.ext.automap import automap_base
 from sqlalchemy.orm import Session
@@ -34,3 +35,64 @@
                         password_hash=user.password,
                         role=user.role))
             session.commit()
+
+    def create_event(self, event: Event):
+        with Session(self._engine) as session:
+            event= self._base.classes.event
+            session.add(event(title=event.title,
+                              description=event.description,
+                              start_time=event.start_time,
+                              end_time=event.end_time,
+                              type=event.type,
+                              organizer_id=event.organizer_id))
+            session.commit()
+
+    def update_event(self, event_id: int, updated_event: Event):
+        with Session(self._engine) as session:
+            event_table = self._base.classes.event
+            event = session.query(event_table).filter_by(id=event_id).first()
+
+            if event:
+                event.title = updated_event.title
+                event.description = updated_event.description
+                event.start_time = updated_event.start_time
+                event.end_time = updated_event.end_time
+                event.type = updated_event.type
+                event.organizer_id = updated_event.organizer_id
+
+                session.commit()
+                return True
+            else:
+                return False
+
+    def delete_event(self, event_id: int):
+        with Session(self._engine) as session:
+            event_table = self._base.classes.event
+
+            # Находим событие по ID
+            event = session.query(event_table).filter_by(id=event_id).first()
+            if not event:
+                return False  # Если событие не найдено, возвращаем False
+
+            session.delete(event)  # Удаляем событие
+            session.commit()  # Подтверждаем изменения
+            return True  # Возвращаем True, если удаление прошло успешно
+
+    def get_all_events(self):
+        with Session(self._engine) as session:
+            event_table = self._base.classes.event
+
+            events = session.query(event_table).all()
+
+            return [
+                {
+                    "id": event.id,
+                    "title": event.title,
+                    "description": event.description,
+                    "start_time": str(event.start_time),
+                    "end_time": str(event.end_time),
+                    "type": event.type,
+                    "organizer_id": event.organizer_id,
+                }
+                for event in events
+            ]
Index: model/Event.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/Event.py b/model/Event.py
new file mode 100644
--- /dev/null	(date 1743584011819)
+++ b/model/Event.py	(date 1743584011819)
@@ -0,0 +1,10 @@
+from pydantic import BaseModel
+
+
+class Event(BaseModel):
+    title: str
+    description: str
+    start_time: str
+    end_time: str
+    type: str
+    organizer_id: str
