Index: env.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nsql_address = os.path.abspath(\"./databases/employees.sqlite\")\r\nurl = \"http://localhost:8080\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/env.py b/env.py
--- a/env.py	(revision 2d057a665710289698d0a4fbe16c04bfdfe2c517)
+++ b/env.py	(date 1743583389289)
@@ -1,3 +1,6 @@
 import os
 sql_address = os.path.abspath("./databases/employees.sqlite")
-url = "http://localhost:8080"
\ No newline at end of file
+url = "http://localhost:8080"
+SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
+ALGORITHM = "HS256"
+ACCESS_TOKEN_EXPIRE_MINUTES = 30
Index: controllers/sqlcontroller.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sqlalchemy\r\nimport bcrypt\r\nfrom model.User import User\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy.ext.automap import automap_base\r\nfrom sqlalchemy.orm import Session\r\n\r\n\r\nclass SQLController:\r\n    _base = None\r\n    _engine = None\r\n\r\n    def __init__(self, address):\r\n        try:\r\n            self._engine = create_engine(address, echo=True)\r\n            self._base = automap_base()\r\n            self._base.prepare(autoload_with=self._engine, reflect=True)\r\n        except sqlalchemy.exc.OperationalError:\r\n            pass\r\n\r\n    def create_user(self, user: User):\r\n        with Session(self._engine) as session:\r\n            salt = bcrypt.gensalt()\r\n            user.password = str(bcrypt.hashpw(user.password.encode(\"utf-8\"), salt))\r\n            employees = self._base.classes.employees\r\n            session.add(employees(first_name=user.first_name,\r\n                        last_name=user.last_name,\r\n                        birth_date=user.birth_date,\r\n                        position=user.position,\r\n                        department=user.department,\r\n                        skills=user.skills,\r\n                        interests=user.interests,\r\n                        email=user.email,\r\n                        password_hash=user.password,\r\n                        role=user.role))\r\n            session.commit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/sqlcontroller.py b/controllers/sqlcontroller.py
--- a/controllers/sqlcontroller.py	(revision 2d057a665710289698d0a4fbe16c04bfdfe2c517)
+++ b/controllers/sqlcontroller.py	(date 1743583389173)
@@ -1,5 +1,7 @@
+from model.LoginCred import LoginCred
 import sqlalchemy
-import bcrypt
+from sqlalchemy import select
+from passlib.hash import pbkdf2_sha256
 from model.User import User
 from sqlalchemy import create_engine
 from sqlalchemy.ext.automap import automap_base
@@ -9,21 +11,20 @@
 class SQLController:
     _base = None
     _engine = None
-
+    _employees = None
     def __init__(self, address):
         try:
             self._engine = create_engine(address, echo=True)
             self._base = automap_base()
             self._base.prepare(autoload_with=self._engine, reflect=True)
+            self._employees = self._base.classes.employees
         except sqlalchemy.exc.OperationalError:
             pass
 
     def create_user(self, user: User):
         with Session(self._engine) as session:
-            salt = bcrypt.gensalt()
-            user.password = str(bcrypt.hashpw(user.password.encode("utf-8"), salt))
-            employees = self._base.classes.employees
-            session.add(employees(first_name=user.first_name,
+            user.password = pbkdf2_sha256.hash(user.password)
+            session.add(self._employees(first_name=user.first_name,
                         last_name=user.last_name,
                         birth_date=user.birth_date,
                         position=user.position,
@@ -34,3 +35,13 @@
                         password_hash=user.password,
                         role=user.role))
             session.commit()
+
+    def login(self, login_credentials: LoginCred):
+        with Session(self._engine) as session:
+            db_user = session.execute(
+                select(self._employees)
+                .where(self._employees.email == login_credentials.login)).scalar()
+            if pbkdf2_sha256.verify(login_credentials.password, db_user.password_hash):
+                return True
+            else:
+                raise ValueError("Invalid password")
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>fastapi\r\nuvicorn\r\nsqlalchemy\r\naiosqlite\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision 2d057a665710289698d0a4fbe16c04bfdfe2c517)
+++ b/requirements.txt	(date 1743583389289)
@@ -2,3 +2,4 @@
 uvicorn
 sqlalchemy
 aiosqlite
+pyjwt
\ No newline at end of file
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import Union\r\n\r\nfrom starlette.middleware.cors import CORSMiddleware\r\n\r\nfrom controllers.sqlcontroller import SQLController\r\nfrom fastapi import FastAPI\r\nimport env\r\n\r\nfrom model.User import User\r\nsql_controller = SQLController(address=f'sqlite:///{env.sql_address}')\r\nprint(sql_controller._base.metadata.tables.keys())\r\napp = FastAPI()\r\norigins = [\r\n    env.url\r\n]\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=origins,\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n@app.post(\"/login\")\r\ndef read_root():\r\n    return {\"Hello\": \"World\"}\r\n\r\n\r\n@app.get(\"/events\")\r\ndef read_calendar():\r\n    pass\r\n@app.get(\"/employees\")\r\ndef read_employees():\r\n    pass\r\n@app.post(\"/adminboard/createuser\")\r\ndef createuser(user: User):\r\n    try:\r\n        sql_controller.create_user(user)\r\n        return {\"message\": \"User created successfully\"}\r\n    except Exception as e:\r\n        return {\"message\": str(e)}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 2d057a665710289698d0a4fbe16c04bfdfe2c517)
+++ b/main.py	(date 1743583389289)
@@ -1,14 +1,15 @@
-from typing import Union
-
 from starlette.middleware.cors import CORSMiddleware
-
+from starlette.responses import JSONResponse
 from controllers.sqlcontroller import SQLController
-from fastapi import FastAPI
 import env
-
+from model.LoginCred import LoginCred
+from model.jwtBearer import create_access_token
 from model.User import User
+from datetime import datetime, timedelta, timezone
+from typing import Annotated
+from fastapi import Depends, FastAPI, HTTPException, status
+from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
 sql_controller = SQLController(address=f'sqlite:///{env.sql_address}')
-print(sql_controller._base.metadata.tables.keys())
 app = FastAPI()
 origins = [
     env.url
@@ -21,8 +22,20 @@
     allow_headers=["*"],
 )
 @app.post("/login")
-def read_root():
-    return {"Hello": "World"}
+def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
+    try:
+        user = LoginCred(login=form_data.username, password=form_data.password)
+        sql_controller.login(user)
+        access_token_expires = timedelta(minutes=env.ACCESS_TOKEN_EXPIRE_MINUTES)
+        access_token = create_access_token(
+            data={"sub": user.login}, expires_delta=access_token_expires
+        )
+        return JSONResponse({"access_token": access_token, "token_type": "bearer"})
+    except Exception as e:
+        print(e)
+        return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content={"message": "Invalid credentials"})
+
+
 
 
 @app.get("/events")
@@ -35,6 +48,6 @@
 def createuser(user: User):
     try:
         sql_controller.create_user(user)
-        return {"message": "User created successfully"}
+        return JSONResponse(status_code=200, content={"message": "User created"})
     except Exception as e:
-        return {"message": str(e)}
+        return JSONResponse(status_code=404, content={"message": str(e)})
